{"version":3,"sources":["components/Phrase.jsx","App.js","serviceWorker.js","index.js"],"names":["ContentPhrase","styled","div","Phrase","phrases","quote","author","Content","Button","button","ContentButton","App","url","useState","Audio","audio","playing","setPlaying","useEffect","play","pause","addEventListener","removeEventListener","useAudio","toggle","savePhrases","fetchAPI","a","fetch","api","json","phrase","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8pCAGA,IAAMA,EAAgBC,IAAOC,IAAV,KA2CJC,EATA,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACd,OACI,kBAACJ,EAAD,KACI,4BAAKI,EAAQC,OACb,2BAAID,EAAQE,U,q2BCpCxB,IAAMC,EAAUN,IAAOC,IAAV,KAMPM,EAASP,IAAOQ,OAAV,KAuBNC,EAAgBT,IAAOC,IAAV,KAgEJS,EA9BH,SAAAC,GAAO,MAvBF,SAAAA,GAAQ,IAAD,EACNC,mBACd,IAAIC,MAAM,+CADLC,EADe,sBAIQF,oBAAS,GAJjB,mBAIfG,EAJe,KAINC,EAJM,KAmBtB,OAXAC,qBAAU,WACRF,EAAUD,EAAMI,OAASJ,EAAMK,UAC9B,CAACJ,EAASD,IAEbG,qBAAU,WAER,OADAH,EAAMM,iBAAiB,SAAS,kBAAMJ,GAAW,MAC1C,WACLF,EAAMO,oBAAoB,SAAS,kBAAML,GAAW,SAErD,CAACF,IAEG,CAACC,EAbO,kBAAMC,GAAYD,KAmBPO,GAFT,mBAEVP,EAFU,KAEDQ,EAFC,OAGcX,mBAAS,IAHvB,mBAGVT,EAHU,KAGDqB,EAHC,KAMXC,EAAQ,uCAAG,8BAAAC,EAAA,sEACGC,MAChB,uDAFa,cACTC,EADS,gBAIMA,EAAIC,OAJV,OAITC,EAJS,OAKfN,EAAYM,EAAO,IALJ,2CAAH,qDAad,OAJAb,qBAAU,WACRQ,MACC,IAGD,kBAACnB,EAAD,KACE,kBAAC,EAAD,CAAQH,QAASA,IACjB,kBAACM,EAAD,KACE,kBAACF,EAAD,CAAQwB,QAASN,GAAjB,cACA,kBAAClB,EAAD,CAAQwB,QAASR,GAASR,EAAU,QAAU,WChFlCiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.668e8735.chunk.js","sourcesContent":["import React from 'react';\nimport styled from '@emotion/styled'\n\nconst ContentPhrase = styled.div`\n    padding: 2rem;\n    border-radius: .1rem;\n    background-color: transparent;\n    max-width:30rem;\n    border:solid 2px black;    \n    @media (min-width: 992px) {\n        margin-top: 14rem;\n    }\n    h2 {\n        font-family: Arial, Helvetica, sans-serif;\n        text-align: center;\n        position: relative;\n        padding-left: 4rem;\n        color:white;\n        &::before {\n            content: open-quote;\n            font-size: 8rem;\n            color: white;\n            position: absolute;\n            left: -1rem;\n            top: -2rem;\n        }\n    }\n    p {\n        font-family: Verdana, Geneva, Tahoma, sans-serif;\n        font-size: 1rem;\n        font-weight:lighter;\n        font-style:italic;\n        text-align: right;\n        color: white;\n        margin-top: 2rem;\n    }\n`;\nconst Phrase = ({ phrases }) => {\n    return (\n        <ContentPhrase>\n            <h2>{phrases.quote}</h2>\n            <p>{phrases.author}</p>\n        </ContentPhrase>\n    );\n}\n\nexport default Phrase;","import React, { useState, useEffect } from 'react'\nimport styled from '@emotion/styled'\nimport Phrase from './components/Phrase'\n\n// ==> styled components\nconst Content = styled.div`\n  display: flex;\n  align-items: center;\n  padding-top: 5rem;\n  flex-direction: column;\n`\nconst Button = styled.button`\n  background: -webkit-linear-gradient(\n    top left,\n    #007d35 0%,\n    #007d35 40%,\n    #0f574e 100%\n  );\n  background-size: 300px;\n  font-family: Arial, Helvetica, sans-serif;\n  color: #fff;\n  width:8rem;\n  margin-top:2rem;\n  padding: 2;\n  font-size: 1.2em;\n  border: 2px solid black;\n  transition: background-size 0.8s ease;\n  height:4rem;\n  :hover {\n    cursor: pointer;\n    background-size: 400px;\n  }\n`\n\nconst ContentButton = styled.div`\n  width:20rem;\n  display:flex;\n  flex-direction:row;\n  justify-content:space-around;\n  align-content:center;\n  align-items:center;\n`;\n// styled components <==//\n\n// ==> function audio\nconst useAudio = url => {\n  const [audio] = useState(\n    new Audio('https://www.mboxdrive.com/breaking-bad.mp3')\n  )\n  const [playing, setPlaying] = useState(false)\n\n  const toggle = () => setPlaying(!playing)\n\n  useEffect(() => {\n    playing ? audio.play() : audio.pause()\n  }, [playing, audio])\n\n  useEffect(() => {\n    audio.addEventListener('ended', () => setPlaying(false))\n    return () => {\n      audio.removeEventListener('ended', () => setPlaying(false))\n    }\n  }, [audio])\n\n  return [playing, toggle]\n}\n// function audio  <==//\n\nconst App = url => {\n  // ==>state\n  const [playing, toggle] = useAudio(url)\n  const [phrases, savePhrases] = useState({})\n  // state <==//\n\n  const fetchAPI = async () => {\n    const api = await fetch(\n      'https://breaking-bad-quotes.herokuapp.com/v1/quotes'\n    )\n    const phrase = await api.json()\n    savePhrases(phrase[0])\n  }\n\n  // Cargar una frase\n  useEffect(() => {\n    fetchAPI()\n  }, [])\n\n  return (\n    <Content>\n      <Phrase phrases={phrases} />\n      <ContentButton>\n        <Button onClick={fetchAPI}>Get Phrase</Button>\n        <Button onClick={toggle}>{playing ? 'Pause' : 'Play'}</Button>\n      </ContentButton>\n    </Content>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}